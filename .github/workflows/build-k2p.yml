#
# Copyright (c) 2019-2020 P3TERX <https://p3terx.com>
#
# This is free software, licensed under the MIT License.
# See /LICENSE for more information.
#
# https://github.com/P3TERX/Actions-OpenWrt
# Description: Build ImmortalWrt using GitHub Actions
#

name: Build Railgun for Phicomm K2P

on:
  repository_dispatch:
  workflow_dispatch:
    inputs:
      ssh:
        description: "SSH connection to Actions"
        required: false
        default: "false"

env:
  REPO_URL: https://github.com/padavanonly/immortalwrt
  REPO_BRANCH: master
  FEEDS_CONF: feeds.conf.default
  CONFIG_FILE: seeds/k2p.seed
  DIY_P1_SH: diy/ramips_mt7621/phicomm_k2p/diy-before-feeds.sh
  DIY_P2_SH: diy/ramips_mt7621/phicomm_k2p/diy-after-feeds.sh
  UPLOAD_BIN_DIR: false
  UPLOAD_FIRMWARE: true
  UPLOAD_RELEASE: true
  TZ: Asia/Shanghai

jobs:
  build:
    runs-on: ubuntu-20.04

    steps:
      - name: Checkout
        uses: actions/checkout@main

      - name: Initialization environment
        env:
          DEBIAN_FRONTEND: noninteractive
        run: |
          sudo rm -rf /etc/apt/sources.list.d/* /usr/share/dotnet /usr/local/lib/android /opt/ghc /etc/mysql /etc/php
          sudo -E apt-get -qq update
          sudo -E apt-get -y purge azure-cli ghc* zulu* hhvm llvm* firefox google* dotnet* powershell openjdk* adoptopenjdk* mysql* php* mongodb* dotnet* moby* snapd*
          sudo -E apt-get -qq install build-essential asciidoc binutils bzip2 gawk gettext git libncurses5-dev libz-dev patch python3 unzip zlib1g-dev lib32gcc1 libc6-dev-i386 subversion flex uglifyjs gcc-multilib g++-multilib p7zip p7zip-full msmtp libssl-dev texinfo libglib2.0-dev xmlto qemu-utils upx libelf-dev autoconf automake libtool autopoint device-tree-compiler antlr3 gperf swig
          sudo -E apt-get -qq autoremove --purge
          sudo -E apt-get -qq clean
          sudo timedatectl set-timezone "$TZ"
          sudo mkdir -p /workdir
          sudo chown $USER:$GROUPS /workdir

      - name: Clone source code
        working-directory: /workdir
        run: |
          df -hT $PWD
          git clone $REPO_URL -b $REPO_BRANCH immortalwrt
          ln -sf /workdir/immortalwrt $GITHUB_WORKSPACE/immortalwrt

      - name: Load custom feeds
        run: |
          [ -e $FEEDS_CONF ] && mv $FEEDS_CONF immortalwrt/feeds.conf.default
          chmod +x $DIY_P1_SH
          cd immortalwrt
          $GITHUB_WORKSPACE/$DIY_P1_SH

      - name: Update feeds
        run: cd immortalwrt && ./scripts/feeds update -a

      - name: Install feeds
        run: cd immortalwrt && ./scripts/feeds install -a -f

      - name: Load custom configuration
        run: |
          [ -e files ] && mv files immortalwrt/files
          [ -e $CONFIG_FILE ] && mv $CONFIG_FILE immortalwrt/.config
          chmod +x $DIY_P2_SH
          cd immortalwrt
          $GITHUB_WORKSPACE/$DIY_P2_SH

      - name: SSH connection to Actions
        uses: P3TERX/ssh2actions@v1.0.0
        if: (github.event.inputs.ssh == 'true' && github.event.inputs.ssh  != 'false') || contains(github.event.action, 'ssh')
        env:
          TELEGRAM_CHAT_ID: ${{ secrets.TELEGRAM_CHAT_ID }}
          TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}

      - name: Download package
        id: package
        run: |
          cd immortalwrt
          make defconfig
          make download -j8
          find dl -size -1024c -exec ls -l {} \;
          find dl -size -1024c -exec rm -f {} \;

      - name: Compile the firmware
        id: compile
        run: |
          cd immortalwrt
          echo -e "$(nproc) thread compile"
          make -j$(nproc) || make -j1 || make -j1 V=s
          echo "status=success" >> $GITHUB_OUTPUT
          grep '^CONFIG_TARGET.*DEVICE.*=y' .config | sed -r 's/.*DEVICE_(.*)=y/\1/' > DEVICE_NAME
          [ -s DEVICE_NAME ] && echo "DEVICE_NAME=_$(cat DEVICE_NAME)" >> $GITHUB_ENV
          echo "FILE_DATE=_$(date +"%Y%m%d%H%M")" >> $GITHUB_ENV

      - name: Check space usage
        if: (!cancelled())
        run: df -hT

      - name: Upload bin directory
        uses: actions/upload-artifact@main
        if: steps.compile.outputs.status == 'success' && env.UPLOAD_BIN_DIR == 'true'
        with:
          name: ImmortalWrt_bin${{ env.DEVICE_NAME }}${{ env.FILE_DATE }}
          path: immortalwrt/bin

      - name: Organize files
        id: organize
        if: env.UPLOAD_FIRMWARE == 'true' && !cancelled()
        run: |
          cd immortalwrt/bin/targets/*/*
          rm -rf packages
          echo "FIRMWARE=$PWD" >> $GITHUB_ENV
          echo "status=success" >> $GITHUB_OUTPUT

      - name: Upload firmware directory
        uses: actions/upload-artifact@main
        if: steps.organize.outputs.status == 'success' && !cancelled()
        with:
          name: ImmortalWrt_firmware${{ env.DEVICE_NAME }}${{ env.FILE_DATE }}
          path: ${{ env.FIRMWARE }}

      - name: Generate release tag
        id: tag
        if: env.UPLOAD_RELEASE == 'true' && !cancelled()
        run: |
          echo "release_tag=$(date +"%Y.%m.%d-%H%M")-phicomm_k2p" >> $GITHUB_OUTPUT
          touch release.txt
          [ $UPLOAD_WETRANSFER = true ] && echo "[WeTransfer](${{ steps.wetransfer.outputs.url }})" >> release.txt
          echo "status=success" >> $GITHUB_OUTPUT

      - name: Delete workflow runs
        uses: Blueplanet20120/delete-workflow-runs@main
        with:
          retain_days: 7
          keep_minimum_runs: 4

      - name: Remove old Releases
        uses: dev-drprasad/delete-older-releases@master
        if: env.UPLOAD_RELEASE == 'true' && !cancelled()
        with:
          keep_latest: 8
          delete_tags: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
